Part 1:
1)
Pros:
-Produces member function like behaviour in a language with no inherent classes like C.
Cons:
-Reuires more overhead as the function pointers must be stored in the struct

2)
I used 4 semaphores for synchronization:
-queueSem: Initialized to the queuesize to only allow that many threads into the queue. Could be a member of queue_info but i wanted to easily access it from every function rather than having to call queue all the time.
-cpuSem: Initialized to 1 and signals whwn the queue can schedule the next task.
-runWorker: is a part of every thread and block once the thread is in the queue and only unblocks when the worker thread is woken up by the scheduler. Blocks on every call to wait_for_cpu
-emptySem: works as a signal between the queue and the scheduler to signal when the queue has gone from an empty state to having an item

3)
There is no bound on how many threads can be created (technically the bound is INT_MAX or +2147483647). The main issue is that we can input a negative number of threads and the dummy scheduling will try to allocate a negative amount of memory which is not possible. My implementation will not run if the queue_size <= 0 or if the thread_count is <=0;

4)
No because it will run until all threads are closed. the number of threads is not held by the function or checked buy our scheduling algorithm and thus we do not have acces to it and cannot have errors due to our scheduling algorithm.

5)
They are declared extern because they are variables to be used outside of the file in which they are declared in hence we need to notify the compiler of this fact.

6)
It prints the error number of failed function call. We do not use errno as we do not collect the error from a system call but rather a user level function call hence we need to collect the error on a user level.

7)
in terms of correctness, wait_for_queue does not need to do anything in order for the program to produce correct output. Not having it (or having it return right away) would affect performance though because the dispatcher thread would essentially be in a busy-wait loop until there is an element in the queue. This would hinder performance as a thread would be taking up processor resources even when it is essentially doing nothing. 

8)
The main program parses the user input to find which policy was selected by the user. That sturcture is then pointed to by the sched pointer (which has already been defined within sched_impl.c) and will use the functions pointed to by the policies shed structure. The position og the function pointers in the definition of the scheduling pointers allows the same name (e.g next_worker) to be used by the sched structure, even though there is no function of the name next_worker in my implementation. This is because next_worker in sched_impl_t is the name of a function pointer and it can point to any function with the same input paraeters and return type as it was declared to have.

10)**
----
It is difficultt to show the benefits of round robin as every worker is indistinguishable from the other and thus we do not see a change in the number of completed processes by the end of a fixed time vs fifo.

Part 2:
1)
The SIGUSR2 and SIGALRM signal as they are signals intended for the scheduler and not the indvidual threads. Worker threads should not be interrupted by or attempt to handle these signals. We unblock SIGUSR1 and SIGTERM because once we reeive a signal it gets added to the blocked list and we need to unblock it to receive another signal of that type.

2)
sigwait blocks a calling thread until a signal from the signal set has been received. it is a waiting function. sigaction on the other hand changes the way a thread reacts when it receives a certain signal. It does not block the thread but instead determines what actions a thread will take upon the receipt of a signal.so for example a call of sigwait will pause on the line until the signal is received then run the very next line. Sigaction will cause the thread to enter whatever function is specified whenever that signal is received without actually needing the signal to have been received at all.

3)
an absolute timer is the alternative. while a relative timer counts a certain amount of time to pass form its call(e.g 3seconds), an absolute timer will wait for a specific time(e.g 13:59:25). If the absolute time specified has passed upon the call, the timer will immediately expire (unlike the relative timer that always waits the amount of time from its call).

4)
The worker thread terminates when it is signalled to by another thread(e.g our scheduler). THis is because the behaviour of the thread upon receiving the kill signal is already defined and will be carried out asynchrounously.

5)
The scheduler finishes when it is signalled to by the timer_handler. The reason it does not terminate when the queue is empty is because if for example the queue is of size 1 and a worker leaves but there is still another worker waiting to enter the queue, it will enter the queue by the time the timer expires. If we were to stop the scheduler the moment the queue is empty we would miss this worker or any others attempting to enter the queue.

6)*
A worker is in the queue until it is terminated. It is removed from the head of the queue upon suspension and moved to the tail of the queue. It is only removed completely when it is terminated.

7)
This is to prevent workers from entering the queue whne they ar not supposed to. For example, when scheduling we remove the head and re-insert it at the tail. We do not want a new worker to enter the queue while this is happening as the former head has not been "removed" from the queue per se, but is simply changing positions. We also want to prevent too many workers from entering the queue and a sempahore is a good way to do this.

8)
completed tracks how many worker threads have been canceled (in our case how many workers have reached the end of their quantas) We compare completed woth thread_count in next worker because we do not want to try  read the queue for the next worker if we have already completed execution of all the workers.

9)
To implement the FIFO schedyle i would modify suspend_worker. I would comment out the lines where the list element is removed and placed at the tail. Though this would be inefficient, it would lead the worker to keep being selected to run until its quanta is finished and it leaves the queue.

10)
we could add an additional signal that would lead the thread to suspend. The action taken when this signal is received could store how long into the quanta the thread was so that it can continue once it is returned to the head of the queue. This woul dbe useful in interrupt handling as the interrupt arrives asynchrounously and needs to be handled quickly hence should not wait to enter the sched_queue or wait to be the head of the sched_queue. 
