					Part 1:
part a)

1)
Our program requires a shared resource to be modified while being supervised. If we used multiple processes we would have to create copies of the string variable meaning the changes that other processes make woul dnot be seen. With threads, we can all modify the same variable as they share a memory space. Using threads fot this process is more efficient.

2)
workperformed is a global variable that all the  threads can modify. It is used to signify that a thread has or is in the process of swapping a character. Only when no thread has made a swap do we know that the whole strig is now in order.

3)
fp is a 'Function Pointer'. More specifically, fp is a pointer to a function that takes any type of pointer as an input, and returns a general purpose pointer to an object or variable.It allows us to pass a fuction for the threads to start.

part b)
 1)
Instruction said to make a while loop for please_quit !=0. Made the loop for pleasequit == 0 as the threads should run until the main process requests they stop by setting please_quit = 1.
 
2)
Moved the allocation of memory of info into the loop so that each thread has its own info rather than them all sharinf=g the same variable.

3)
replaced 1st whatgoes here with rv which holds result of join_enzymes and the other 2 with the relevant parts of status.

4)
currently passes all tests in the new testrunner provided

Questions:
1)
We do not use detach because we need the join_enzyme function to wait for all threads to cancel or terminate so that we can collect their swap counts. If we use detach, the main thread will not wait for the other threads to terminate. and thus may collect a swapcount before all swaps are completed.
Because the sleeper thread is independent of all the other processes, it can be detached without affecting the main program. Even if it is detached it will still call exit and terminate the program if it awakes(regardless of if it is detached or not.

2)
The program uses sched_yield to release the processor for use by ther threads. If we did not use this, the first few enzymes in the function could hold the processor fora long time until that section of the word is sorted then would only release the processor after they have exited (but the entire word would not be sorted as the last sections of the string would not be processed yet). With sched_yield, each enzyme(thread) is given an opportunity to sort on each round ensuring that the entire word is sorted.

3)
This is because cancelled threads do not have their info dereferenced(i.e they do not return a data structure with swapcount), so we cannot access the data they had.

4)
A thread can only join with a terminated thread. if join() is called by its thread on itself, it will be waiting indefinitely for itself to end, therefore, it enters a state of deadlock. The OS prevents the deadlock from continuing and generates an error.

5)
The sleeper thread runs independently to the rest of the program. It will sleep for a certain amount of time and if it wakes up, it will end the program. This prevents the program from being caught in an infinite loop.

6)
This is so that our threads cancel one at a time until the C is at the front of our string, rather than all at once.

7)
Only one thread_info variable is collected so currently all of the threads would change the shared thread variable. This would cause 2 issues:
-the swapcount would be initialized multiple times(thread 10 could initialize a swapcount that has already been incremented)
-the threads would all work on the same section of the string as the string variable would be the same for all strings.







					Part2:

1)
(context: my multiplier looks for a '*' then reads the naked numbers value1*value2 around it from the digits closest to the '*')
A synchronization error we could encounter are race conditions and data corruption. an example of a race conditon is given below.
Two threads could interfere with eachother: the degrouper and multiplier. For example, they could both be working on a string "(32)*54". When the degrouper removes the ')' bracket, the multiplier reads the 2 and 5 around the '*' and begins collecting the values. However, The degrouper will then delete the '(' by shifting the entire string one place to the left. If '2' was originally in s[3] it will now be in s[2]. This will cause the multiplier to read 2 a second time. As a result, the multiplier will read 32 as 322, and 54 as 5. we will now have 322 * 5 being used as the result instead of 32 * 54.

2)
No, the program should not generate an incorrect output. The correct output should be produced regardless of the number of expressions. This is because the expressions are independent from one another. Assuming sentinel does not attempt to, for example, deque the result of a  simplified expression surrounded by other expressions still being processed*, the result should be correct.

*if the queue at some point becomes "(unsimplified expression) ; (simplified expression) ; (unsimplified expression)" , the result will be correct for so long as the sentinel does not attempt to dequeue the simplified expression. 

3)
Buffer needs protection as if 2 threads read or write from the buffer at the same time, they may interfere with one another.

4)
If there is a busy-wait or a sched_yield() within the critical section, this will lead to starvation. The locking thread will prevent all other threads from using buffer. the busy-wait or sched_yield() will be waiting for a change in another thread's state, but no thread will be able to change state as they are all prevented from using the buffer. The result is an infinite wait.

5)
*

6)
A mutex is required, however, we could use the same mutex previously used. Any operation where multiple threads can read and write to a memory location requires synchronization. This is because the increment operation involves the reading of the num_ops variable. For example, if thread 1 and thread 2 are trying to simultaneously increment a = 1, they will both store temp = 1, and 1 to it and store a = temp = 2. even though 2 increment operations have been done, a has only incrememnted by 1.

7)
This is to prevent the locking of resources when the thread is cancelled or blocked.

8)
It is inefficient because the thread will spend processor time essentially doing nothing.

9)
spin-waiting can be "more" efficient when there are very short wait times (e.g only a few hundred clock cycles) as it does not require the CPU to block and unblock the thread. 